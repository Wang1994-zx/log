###############################################################################
# 参考文档
# 《GNU Make》
# http://www.gnu.org/software/make/
# 《跟我一起写Makefile:MakeFile介绍》
# https://wiki.ubuntu.org.cn/%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99Makefile:MakeFile%E4%BB%8B%E7%BB%8D
#
# Makefile是make所调用的文件，用来确定源码的编译和链接规则；make全称GNU Make，
# 是用来将源码编译成可执行程序的软件
#
# 使用方法：Linux环境下，在工程文件夹顶层有Makefile文件的路径下执行Shell命令
# make即可，清除编译痕迹则使用make clean
# 如果哪个选项不知道意思，使用man make或者man gcc命令查找
###############################################################################

#############################################
## 一种最简单的Makefile写法如下，只需要两行：
#all	:
#	gcc -o output_bin *.c
#############################################

## make命令执行gcc命令时默认带的参数，等号前是变量名，调用时使用$(变量名)
#  -o gcc指定输出文件名
CFLAGS = -o

# 指定编译工具软件的名字，可以用来切换本地编译和交叉工具编译
CC = gcc

# 指定最终生成的可执行文件名称，也就是gcc -o 后面带的参数
target = demo

## make第一个执行的默认目标或标签 ：生成目标内容所需要的文件(本示例中
#  所需要的文件为空）
#  (这些所需要的文件由下面的Shell命令生成，并且只有生成目标内容所需要的文件
#  比要生成的目标新，Shell命令才会执行)
all	: 
#       make要执行的任意Shell命令，这里是gcc，**注意**缩进的语句前一定要是
#       tab，不能是空格，空格会报错；@是取消当前语句的屏幕回显
	@$(CC) $(CFLAGS) $(target) *.c
	@echo 生成的可执行文件名：$(target)

## clean是一个伪标签，用来作为make命令后面的参数，进一步执行rm Sheel脚本
#  clean是一个约定俗称的名字，用来清理编译痕迹，方便下一次make的时候可以
#  让所有的文件重新编译
clean	:
	rm $(target)

